http://www.4clojure.com/problem/120

Difficulty:	Easy
Topics:	math

Write a function which takes a collection of integers as an argument. Return the count of how many elements are smaller than the sum of their squared component digits. For example: 10 is larger than 1 squared plus 0 squared; whereas 15 is smaller than 1 squared plus 5 squared.

1. (= 8 (__ (range 10)))
2. (= 19 (__ (range 30)))
3. (= 50 (__ (range 100)))
4. (= 50 (__ (range 1000)))

Solutions:

1. (fn foo [xs]
     (let [sum-digits (fn [n]
                        (loop [x n y 0]
                          (if (not= 0 x)
                            (recur (quot x 10)
                                   (+ y (* (rem x 10) (rem x 10))))
                            y)))
           ys (for [x xs :when (< x (sum-digits x))] x)]
       (count ys)))
