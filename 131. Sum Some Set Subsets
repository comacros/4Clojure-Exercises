http://www.4clojure.com/problem/131
 
Difficulty:	Medium
Topics:	math

Given a variable number of sets of integers, create a function which returns true iff all of the sets have a non-empty subset with an equivalent summation.

1. (= true  (__ #{-1 1 99} 
                #{-2 2 888}
                #{-3 3 7777})) ; ex. all sets have a subset which sums to zero
2. (= false (__ #{1}
                #{2}
                #{3}
                #{4}))
3. (= true  (__ #{1}))
4. (= false (__ #{1 -3 51 9} 
                #{0} 
                #{9 2 81 33}))
5. (= true  (__ #{1 3 5}
                #{9 11 4}
                #{-3 12 3}
                #{-3 4 -2 10}))
6. (= false (__ #{-1 -2 -3 -4 -5 -6}
                #{1 2 3 4 5 6 7 8 9}))
7. (= true  (__ #{1 3 5 7}
                #{2 4 6 8}))
8. (= true  (__ #{-1 3 -5 7 -9 11 -13 15}
                #{1 -3 5 -7 9 -11 13 -15}
                #{1 -1 2 -2 4 -4 8 -8}))
9. (= true  (__ #{-10 9 -8 7 -6 5 -4 3 -2 1}
                #{10 -9 8 -7 6 -5 4 -3 2 -1}))

Solutions:

1. (fn [ & more ]
     (letfn [(increase-by-one? [xs]
                               (apply (partial = 1) (map - (rest xs) (drop-last xs))))
             (last-not-increase-by-one [xs]
                                       (let [steps (map - (rest xs) (drop-last xs))]
                                         (loop [steps (map - (rest xs) (drop-last xs))
                                                i (count steps)]
                                           (if (not= 1 (last steps))
                                             i
                                             (recur (drop-last steps) (dec i))))))
             (next-index [xs k]
                         (if (and (increase-by-one? xs)
                                  (= (last xs) (dec k)))
                           nil
                           (let [ys (concat (drop-last xs) (list (inc (last xs))))]
                             (if (= (last ys) k)
                               (let [ith-to-change (last-not-increase-by-one xs)
                                     zs1 (take (- ith-to-change 1) ys)
                                     z (inc (nth ys (dec ith-to-change)))
                                     zs2 (range (inc z)
                                                (+ (- (count xs) ith-to-change)
                                                   (inc z)))]
                                 (concat (concat zs1 (list z)) zs2))
                               ys))))
             (combinations-list [m n]
                                (loop [xs (range m) ys (list xs)]
                                  (if (nil? xs)
                                    (rest ys)
                                    (let [_ (next-index xs n)]
                                      (recur _ (conj ys _))))))
             (all-combinations-list [n]
                                    (loop [i 1 ys (list)]
                                      (if (> i n)
                                        ys
                                        (recur (inc i) (into ys (combinations-list i n))))))
             (foo [xs]
                  (let [cnt (count xs)
                        index-list (all-combinations-list cnt)
                        ys (vec xs)]
                    (set (for [index index-list]
                           (apply + (map ys index))))))]
    (not (empty? (apply clojure.set/intersection (map foo more))))))
