https://www.4clojure.com/problem/31

Difficulty:	Easy
Topics:	seqs

Write a function which packs consecutive duplicates into sub-lists.

1. (= (__ [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3)))
2. (= (__ [:a :a :b :b :c]) '((:a :a) (:b :b) (:c)))
3. (= (__ [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])))

Solutions:

1. (fn bar [xs]
     (let [x ((fn foo [ys]
                (if (= 0 (count ys))
                  (list)
                  (let [y (first ys) ymore (rest ys)]
                    (if (= y (first ymore))
                      (concat (list y) (foo ymore))
                      (list y))))) xs)
           more (drop (count x) xs)]
       (if (= 0 (count more))
         (list x)
         (concat (list x) (bar more)))))
