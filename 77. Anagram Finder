http://www.4clojure.com/problem/77
 
Difficulty:	Medium
Topics:	

Write a function which finds all the anagrams in a vector of words. A word x is an anagram of word y if all the letters in x can be rearranged in a different order to form y. Your function should return a set of sets, where each sub-set is a group of words which are anagrams of each other. Each sub-set should have at least two words. Words without any anagrams should not be included in the result.

1. (= (__ ["meat" "mat" "team" "mate" "eat"])
      #{#{"meat" "team" "mate"}})
2. (= (__ ["veer" "lake" "item" "kale" "mite" "ever"])
      #{#{"veer" "ever"} #{"lake" "kale"} #{"mite" "item"}})

Solutions:

1. (fn foo [xs]
     (let [ys (set (for [x xs] (sort(seq x))))
           zs (for [y ys]
                (filter (fn [x] (= y (sort (seq x)))) xs))
           as (filter (fn [x] (> (count x) 1)) zs)]
       (set (for [a as] (set a)))))
