http://www.4clojure.com/problem/53

Difficulty:	Hard
Topics:	seqs

Given a vector of integers, find the longest consecutive sub-sequence of increasing numbers. If two sub-sequences have the same length, use the one that occurs first. An increasing sub-sequence must have a length of 2 or greater to qualify.

1. (= (__ [1 0 1 2 3 0 4 5]) [0 1 2 3])
2. (= (__ [5 6 1 3 2 7]) [5 6])
3. (= (__ [2 3 3 4 5]) [3 4 5])
4. (= (__ [7 6 5 4]) [])

Solutions:

1. (fn omg [xs]
     (let [foo (fn f [ys]
                 (if (= 0 (count ys))
                   []
                   (let [y (first ys) ymore (rest ys)]
                     (if (= (inc y) (first ymore))
                       (vec (concat [y] (f ymore)))
                       [y]))))
           bar (fn f [ys]
                 (if (= 0 (count ys))
                   nil
                   (let [v (foo ys)]
                     (concat []
                             [v]
                             (f (drop (count v) ys))))))
           vv (bar xs)
           nn (map count vv)
           mm (apply max nn)]
       (if (= mm 1)
         []
         (first (for [xx vv
                      :when (= mm (count xx))] xx)))))
