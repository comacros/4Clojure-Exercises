http://www.4clojure.com/problem/78
 
Difficulty:	Medium
Topics:	core-functions

Reimplement the function described in "Intro to Trampoline".

Special Restrictions: trampoline

1. (= (letfn [(triple [x] #(sub-two (* 3 x)))
             (sub-two [x] #(stop?(- x 2)))
             (stop? [x] (if (> x 50) x #(triple x)))]
       (__ triple 2))
     82)
2. (= (letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))
             (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]
       (map (partial __ my-even?) (range 6)))
     [true false true false true false])

Solutions:

1. (fn foo [f & more]
     (let [g (apply f more)]
       (if (fn? g)
         (foo g)
         g)))
